/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package test

import java.util.PriorityQueue
import kotlin.math.abs

fun main() {
//    val s=Solution835.Solution()
//    print(s.largestOverlap(arrayOf(intArrayOf(0,1), intArrayOf(1,1)), arrayOf(intArrayOf(1,1), intArrayOf(1,0))))
    val s=Solution49.Solution()
    println(s.groupAnagrams(arrayOf("eat","tea","tan","ate","nat","bat")))
    println(s.groupAnagrams(arrayOf("bdddddddddd","bbbbbbbbbbc")))
}

class Solution {
    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {
        val points= mutableListOf<Pair<Int, Int>>()

        for (b in buildings) {
            points.add(Pair(b[0], -b[2]))
            points.add(Pair(b[1], b[2]))
        }
        points.sortWith(Comparator{ p1, p2 ->
            if (p1.first!=p2.first) {
                return@Comparator p1.first.compareTo(p2.first)
            }
            return@Comparator p1.second.compareTo(p2.second)
        })

        val result= arrayListOf<List<Int>>()
        val maxHeap=PriorityQueue<Int>()
        var curHeight=0
        maxHeap.add(0)

        for (p in points) {
            val x=p.first
            val h=p.second
            if (h<0) {
                maxHeap.add(h)
            } else {
                // remove the left point
                maxHeap.remove(-h)
            }
            if (curHeight != -maxHeap.peek()) {
                curHeight = -maxHeap.peek()
                result.add(listOf(x, curHeight))
            }
        }

        return result.toList()
    }
}
